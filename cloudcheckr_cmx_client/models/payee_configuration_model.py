# coding: utf-8

"""
    CloudCheckr API

    CloudCheckr API  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudcheckr.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PayeeConfigurationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_payee_location': 'str',
        'payee_location_group_id': 'str'
    }

    attribute_map = {
        'default_payee_location': 'defaultPayeeLocation',
        'payee_location_group_id': 'payeeLocationGroupId'
    }

    def __init__(self, default_payee_location=None, payee_location_group_id=None):  # noqa: E501
        """PayeeConfigurationModel - a model defined in Swagger"""  # noqa: E501
        self._default_payee_location = None
        self._payee_location_group_id = None
        self.discriminator = None
        if default_payee_location is not None:
            self.default_payee_location = default_payee_location
        if payee_location_group_id is not None:
            self.payee_location_group_id = payee_location_group_id

    @property
    def default_payee_location(self):
        """Gets the default_payee_location of this PayeeConfigurationModel.  # noqa: E501

        The default location where payees will be placed within the hierarchy.  # noqa: E501

        :return: The default_payee_location of this PayeeConfigurationModel.  # noqa: E501
        :rtype: str
        """
        return self._default_payee_location

    @default_payee_location.setter
    def default_payee_location(self, default_payee_location):
        """Sets the default_payee_location of this PayeeConfigurationModel.

        The default location where payees will be placed within the hierarchy.  # noqa: E501

        :param default_payee_location: The default_payee_location of this PayeeConfigurationModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "SameAsPayer", "SpecificAccountGroup"]  # noqa: E501
        if default_payee_location not in allowed_values:
            raise ValueError(
                "Invalid value for `default_payee_location` ({0}), must be one of {1}"  # noqa: E501
                .format(default_payee_location, allowed_values)
            )

        self._default_payee_location = default_payee_location

    @property
    def payee_location_group_id(self):
        """Gets the payee_location_group_id of this PayeeConfigurationModel.  # noqa: E501

        The account group ID to place payees (if applicable).  # noqa: E501

        :return: The payee_location_group_id of this PayeeConfigurationModel.  # noqa: E501
        :rtype: str
        """
        return self._payee_location_group_id

    @payee_location_group_id.setter
    def payee_location_group_id(self, payee_location_group_id):
        """Sets the payee_location_group_id of this PayeeConfigurationModel.

        The account group ID to place payees (if applicable).  # noqa: E501

        :param payee_location_group_id: The payee_location_group_id of this PayeeConfigurationModel.  # noqa: E501
        :type: str
        """

        self._payee_location_group_id = payee_location_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayeeConfigurationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayeeConfigurationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
