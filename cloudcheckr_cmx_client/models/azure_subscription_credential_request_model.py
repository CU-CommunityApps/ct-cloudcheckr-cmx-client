# coding: utf-8

"""
    CloudCheckr API

    CloudCheckr API  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudcheckr.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AzureSubscriptionCredentialRequestModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_directory_id': 'str',
        'subscription_id': 'str',
        'application': 'ApplicationModel',
        'region_group': 'str'
    }

    attribute_map = {
        'active_directory_id': 'activeDirectoryId',
        'subscription_id': 'subscriptionId',
        'application': 'application',
        'region_group': 'regionGroup'
    }

    def __init__(self, active_directory_id=None, subscription_id=None, application=None, region_group=None):  # noqa: E501
        """AzureSubscriptionCredentialRequestModel - a model defined in Swagger"""  # noqa: E501
        self._active_directory_id = None
        self._subscription_id = None
        self._application = None
        self._region_group = None
        self.discriminator = None
        if active_directory_id is not None:
            self.active_directory_id = active_directory_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if application is not None:
            self.application = application
        if region_group is not None:
            self.region_group = region_group

    @property
    def active_directory_id(self):
        """Gets the active_directory_id of this AzureSubscriptionCredentialRequestModel.  # noqa: E501

        The Active Directory's unique identifier.  # noqa: E501

        :return: The active_directory_id of this AzureSubscriptionCredentialRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._active_directory_id

    @active_directory_id.setter
    def active_directory_id(self, active_directory_id):
        """Sets the active_directory_id of this AzureSubscriptionCredentialRequestModel.

        The Active Directory's unique identifier.  # noqa: E501

        :param active_directory_id: The active_directory_id of this AzureSubscriptionCredentialRequestModel.  # noqa: E501
        :type: str
        """

        self._active_directory_id = active_directory_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this AzureSubscriptionCredentialRequestModel.  # noqa: E501

        Azure subscription ID.  # noqa: E501

        :return: The subscription_id of this AzureSubscriptionCredentialRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this AzureSubscriptionCredentialRequestModel.

        Azure subscription ID.  # noqa: E501

        :param subscription_id: The subscription_id of this AzureSubscriptionCredentialRequestModel.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def application(self):
        """Gets the application of this AzureSubscriptionCredentialRequestModel.  # noqa: E501


        :return: The application of this AzureSubscriptionCredentialRequestModel.  # noqa: E501
        :rtype: ApplicationModel
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this AzureSubscriptionCredentialRequestModel.


        :param application: The application of this AzureSubscriptionCredentialRequestModel.  # noqa: E501
        :type: ApplicationModel
        """

        self._application = application

    @property
    def region_group(self):
        """Gets the region_group of this AzureSubscriptionCredentialRequestModel.  # noqa: E501

        The account's region group (i.e. the unique data center group that is being used, e.g. commercial, gov, etc).  # noqa: E501

        :return: The region_group of this AzureSubscriptionCredentialRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._region_group

    @region_group.setter
    def region_group(self, region_group):
        """Sets the region_group of this AzureSubscriptionCredentialRequestModel.

        The account's region group (i.e. the unique data center group that is being used, e.g. commercial, gov, etc).  # noqa: E501

        :param region_group: The region_group of this AzureSubscriptionCredentialRequestModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Commercial", "UsGov", "Germany"]  # noqa: E501
        if region_group not in allowed_values:
            raise ValueError(
                "Invalid value for `region_group` ({0}), must be one of {1}"  # noqa: E501
                .format(region_group, allowed_values)
            )

        self._region_group = region_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AzureSubscriptionCredentialRequestModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureSubscriptionCredentialRequestModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
