# coding: utf-8

"""
    CloudCheckr API

    CloudCheckr API  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudcheckr.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VerificationActionModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'additional_info': 'str',
        'outcome': 'str'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'additional_info': 'additionalInfo',
        'outcome': 'outcome'
    }

    def __init__(self, id=None, description=None, additional_info=None, outcome=None):  # noqa: E501
        """VerificationActionModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._additional_info = None
        self._outcome = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if additional_info is not None:
            self.additional_info = additional_info
        if outcome is not None:
            self.outcome = outcome

    @property
    def id(self):
        """Gets the id of this VerificationActionModel.  # noqa: E501

        The verification action's unique ID.  # noqa: E501

        :return: The id of this VerificationActionModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VerificationActionModel.

        The verification action's unique ID.  # noqa: E501

        :param id: The id of this VerificationActionModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this VerificationActionModel.  # noqa: E501

        Description of the verification action performed.  # noqa: E501

        :return: The description of this VerificationActionModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VerificationActionModel.

        Description of the verification action performed.  # noqa: E501

        :param description: The description of this VerificationActionModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def additional_info(self):
        """Gets the additional_info of this VerificationActionModel.  # noqa: E501

        Additional information returned by the verification step.  # noqa: E501

        :return: The additional_info of this VerificationActionModel.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this VerificationActionModel.

        Additional information returned by the verification step.  # noqa: E501

        :param additional_info: The additional_info of this VerificationActionModel.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def outcome(self):
        """Gets the outcome of this VerificationActionModel.  # noqa: E501

        Outcome of the verification action.  # noqa: E501

        :return: The outcome of this VerificationActionModel.  # noqa: E501
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this VerificationActionModel.

        Outcome of the verification action.  # noqa: E501

        :param outcome: The outcome of this VerificationActionModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Passed", "Failed", "Warning", "Skipped", "Empty", "RequestingAccess", "RequiresAccountSelection"]  # noqa: E501
        if outcome not in allowed_values:
            raise ValueError(
                "Invalid value for `outcome` ({0}), must be one of {1}"  # noqa: E501
                .format(outcome, allowed_values)
            )

        self._outcome = outcome

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerificationActionModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerificationActionModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
